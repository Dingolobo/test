name: Generate Tubi FOX EPG XML (Simple Curl)

on:
  schedule:
    - cron: '0 */6 * * *'  # Cada 6 horas
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python (minimal)
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python deps (only if needed)
      run: |
        pip install requests  # Opcional, para fallback si curl falla

    - name: Fetch EPG Data with Curl
      id: fetch
      run: |
        URL="https://api.codetabs.com/v1/proxy?quest=https://epg-cdn.production-public.tubi.io/content/epg/programming?platform=web&device_id=&lookahead=1&content_id=400000122"
        
        # Headers anti-bot (simula Chrome)
        curl -s -L \
          -H "User -Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" \
          -H "Accept: application/json, text/plain, */*" \
          -H "Accept-Language: en-US,en;q=0.9,es;q=0.8" \
          -H "Accept-Encoding: gzip, deflate, br" \
          -H "Referer: https://tubitv.com/" \
          -H "Origin: https://tubitv.com" \
          -H "Sec-Fetch-Dest: empty" \
          -H "Sec-Fetch-Mode: cors" \
          -H "Sec-Fetch-Site: same-site" \
          -H "Connection: keep-alive" \
          --max-time 30 \
          "$URL" > tubi_data.json
        
        # Logs para debug
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL" -H "User -Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        LENGTH=$(wc -c < tubi_data.json)
        echo "Curl HTTP Status: $STATUS"
        echo "Response Length: $LENGTH chars"
        echo "First 200 chars: $(head -c 200 tubi_data.json)"
        
        if [ "$STATUS" != "200" ] || [ "$LENGTH" -lt 100 ]; then
          echo "Curl failed (Akamai block?). Status: $STATUS, Length: $LENGTH"
          echo "Full response: $(cat tubi_data.json)"
          echo "json_fetched=false" >> $GITHUB_ENV
        else
          echo "Curl success! JSON saved."
          echo "json_fetched=true" >> $GITHUB_ENV
        fi

    - name: Parse JSON to XMLTV
      if: env.json_fetched == 'true'
      run: |
        python parse-tubi-xml.py
        if [ -f tubi_fox.xml ]; then
          echo "xml_generated=true" >> $GITHUB_ENV
        else
          echo "xml_generated=false" >> $GITHUB_ENV
        fi

    - name: Commit and Push XML (if generated)
      if: env.xml_generated == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add tubi_fox.xml
        if git diff --staged --quiet; then
          echo "No changes."
        else
          git commit -m "Update Tubi FOX EPG XML [$(date +'%Y-%m-%d %H:%M UTC')]"
          git push
        fi
      continue-on-error: true

    - name: Upload Artifacts (for debug)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tubi-files
        path: |
          tubi_data.json
          tubi_fox.xml
        if-no-files-found: ignore
